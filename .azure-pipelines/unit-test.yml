trigger: none

pr:
  autoCancel: true
  drafts: false
  branches:
    include:
      - main
  paths:
    include:
      - auto_round
      - auto_round_extension
      - test
      - setup.py
      - requirements.txt
      - requirements-cpu.txt
      - .azure-pipelines/scripts/ut
      - .azure-pipelines/unit-test.yml
      - .azure-pipelines/template/ut-template.yml
      - .azure-pipelines/template/docker-template.yml
    exclude:
      - test/test*hpu*
      - "*.md"
      - "**/*.md"

pool: ICX-16C

variables:
  IMAGE_NAME: "auto-round"
  IMAGE_TAG: "py310"
  UPLOAD_PATH: $(Build.SourcesDirectory)/log_dir
  DOWNLOAD_PATH: $(Build.SourcesDirectory)/log_dir
  ARTIFACT_NAME: "UT_coverage_report"
  REPO: $(Build.Repository.Uri)

stages:
  - stage: Unit_test
    displayName: Unit Test
    dependsOn: []
    jobs:
      - job:
        displayName: Unit Test
        timeoutInMinutes: 120
        strategy:
          matrix:
            part1:
              PART: 1
            part2:
              PART: 2
            part3:
              PART: 3
        steps:
          - template: template/ut-template.yml
            parameters:
              dockerConfigName: "commonDockerConfig"
              utScriptFileName: "run_ut"
              uploadPath: $(UPLOAD_PATH)
              utArtifact: "ut-$(PART)"
              utTestMode: $(PART)

  - stage: Coverage
    displayName: "Collect Coverage"
    pool:
      vmImage: "ubuntu-latest"
    dependsOn: [Unit_test]
    jobs:
      - job: CollectDatafiles
        steps:
          - script: |
              docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
              docker images | grep -i ${IMAGE_NAME}
              if [[ $? -ne 0 ]]; then
                echo "NO Such Repo"
                exit 1
              fi
            displayName: "Build develop docker image"

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact:
              patterns: "*_coverage/.coverage"
              path: $(DOWNLOAD_PATH)

          - script: |
              echo "--- create container ---"
              docker run -d -it --name="collectLogs"  -v ${BUILD_SOURCESDIRECTORY}:/auto-round  ${IMAGE_NAME}:${IMAGE_TAG} /bin/bash
              echo "--- docker ps ---"
              docker ps
              echo "--- collect logs ---"
              docker exec collectLogs bash -c "cd /auto-round \
                && pip install -r requirements.txt \
                && pip install -r requirements-cpu.txt \
                && pip install -vvv --no-build-isolation . \
                && pip list"
              docker exec collectLogs /bin/bash +x -c "cd /auto-round/.azure-pipelines/scripts \
                && bash ut/collect_log.sh"
            displayName: "Collect UT Coverage"

          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: $(UPLOAD_PATH)
              artifact: $(ARTIFACT_NAME)
              publishLocation: "pipeline"

          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk 7.0.x'
            inputs:
              version: 7.0.x

          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: $(Build.SourcesDirectory)/log_dir/coverage_PR/coverage.xml
