parameters:
  - name: dockerConfigName
    type: string
    default: "commonDockerConfig"
  - name: repo
    type: string
    default: "https://github.com/intel/auto-round"
  - name: utScriptFileName
    type: string
  - name: uploadPath
    type: string
  - name: utArtifact
    type: string
  - name: utTestMode
    type: string
    default: "coverage"
  - name: utContainerName
    type: string
    default: "AutoRoundUnitTest"
  - name: imageSource
    type: string
    default: "build"

steps:
  - template: docker-template.yml
    parameters:
      dockerConfigName: ${{ parameters.dockerConfigName }}
      repoName: "auto-round"
      repoTag: "py310"
      dockerFileName: "Dockerfile"
      containerName: ${{ parameters.utContainerName }}
      repo: ${{ parameters.repo }}
      imageSource: ${{ parameters.imageSource }}

  - ${{ if eq(parameters.imageSource, 'build') }}:
    - script: |
        docker exec ${{ parameters.utContainerName }} bash -c "cd /auto-round \
          && pip install -r requirements.txt \
          && pip install -vvv --no-build-isolation -e .[cpu] \
          && pip list"
      displayName: "Env Setup"

  - ${{ if eq(parameters.imageSource, 'pull') }}:
    - script: |
        docker exec ${{ parameters.utContainerName }} bash -c "cd /auto-round \
          && pip install -vvv --no-build-isolation -e .[hpu] \
          && pip list"
      displayName: "HPU Env Setup"

  - script: |
      docker exec ${{ parameters.utContainerName }} bash -c "cd /auto-round/.azure-pipelines/scripts \
        && bash ut/${{ parameters.utScriptFileName }}.sh ${{ parameters.utTestMode }}"
    displayName: "Run UT"

  - task: PublishPipelineArtifact@1
    condition: succeededOrFailed()
    inputs:
      targetPath: ${{ parameters.uploadPath }}
      artifact: ${{ parameters.utArtifact }}_coverage
      publishLocation: "pipeline"

  - task: Bash@3
    condition: always()
    inputs:
      targetType: "inline"
      script: |
        docker exec ${{ parameters.utContainerName }} bash -c "rm -rf /auto-round/* && rm -rf /auto-round/.* || true"
        docker stop ${{ parameters.utContainerName }}
        docker rm -vf ${{ parameters.utContainerName }} || true
    displayName: "Docker clean up"
