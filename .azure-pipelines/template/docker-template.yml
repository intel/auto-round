parameters:
  - name: dockerConfigName
    type: string
    default: "commonDockerConfig"
  - name: repoName
    type: string
    default: "auto-round"
  - name: repoTag
    type: string
    default: "py310"
  - name: dockerFileName
    type: string
    default: "Dockerfile"
  - name: containerName
    type: string
  - name: repo
    type: string
    default: "https://github.com/intel/auto-round"

steps:
  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        docker ps -a
        if [[ $(docker ps -a | grep -i '${{ parameters.containerName }}'$) ]]; then
            docker start $(docker ps -aq)
            echo "remove left files through container ..."
            docker exec ${{ parameters.containerName }} bash -c "ls -a /auto-round && rm -fr /auto-round/* && rm -fr /auto-round/.* && ls -a /auto-round || true"
        fi
    displayName: "Docker clean up"

  - ${{ if eq(parameters.dockerConfigName, 'commonDockerConfig') }}:
      - script: |
          rm -fr ${BUILD_SOURCESDIRECTORY} || sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
          echo y | docker system prune
        displayName: "Clean workspace"

      - checkout: self
        clean: true
        displayName: "Checkout out Repo"

  - ${{ if eq(parameters.dockerConfigName, 'gitCloneDockerConfig') }}:
      - script: |
          rm -fr ${BUILD_SOURCESDIRECTORY} || sudo rm -fr ${BUILD_SOURCESDIRECTORY} || true
          mkdir ${BUILD_SOURCESDIRECTORY}
          chmod 777 ${BUILD_SOURCESDIRECTORY}
          echo y | docker system prune
        displayName: "Clean workspace"

      - checkout: none

      - script: |
          git clone ${{ parameters.repo }} ${BUILD_SOURCESDIRECTORY}
          git config --global --add safe.directory ${BUILD_SOURCESDIRECTORY}
          cd ${BUILD_SOURCESDIRECTORY}
          git checkout master
        displayName: "Checkout out master"

  - script: |
      if [[ ! $(docker images | grep -i ${{ parameters.repoName }}:${{ parameters.repoTag }}) ]]; then
        docker build -f ${BUILD_SOURCESDIRECTORY}/.azure-pipelines/docker/${{parameters.dockerFileName}}.devel -t ${{ parameters.repoName }}:${{ parameters.repoTag }} .
      fi
      docker images | grep -i ${{ parameters.repoName }}
      if [[ $? -ne 0 ]]; then
        echo "NO Such Repo"
        exit 1
      fi
    displayName: "Build develop docker image"

  - script: |
      docker stop $(docker ps -aq)
      docker rm -vf ${{ parameters.containerName }} || true
      env | sort
    displayName: "Clean docker container"

  - ${{ if ne(parameters.containerName, '') }}:
      - task: Bash@3
        inputs:
          targetType: "inline"
          script: |
            docker run -dit --disable-content-trust --privileged --name=${{ parameters.containerName }} --shm-size="2g" \
            -v ${BUILD_SOURCESDIRECTORY}:/auto-round -v /tf_dataset:/tf_dataset -v /tf_dataset2:/tf_dataset2 ${{ parameters.repoName }}:${{ parameters.repoTag }}
            echo "Show the container list after docker run ... "
            docker ps -a
        displayName: "Docker run - ${{ parameters.containerName }} Container"
